import "std.um"

fn test1() {
	// Pointers
	p := new(int, 42)
	var q: ^void

	q = p 
	printf("%v %v %v %v %v %v\n", p != q, q == p, p == null, null != p, q == null, null != q)

	printf("%v\n", p^)

	p = null 
	printf("%v %v %v %v %v %v\n", p != q, q == p, p == null, null != p, q == null, null != q)

	a := 42 + 13 * 256
	b := ^[8]uint8(&a)^
	printf("%v\n", b)   
}

fn test2() {
	// Dynamic arrays
	var p: [3]int
	{
		a := []int{1, 4, 7}

		p = [3]int(a)
		a = append(a, 10)
		a[1] = 5

		printf("%v\n", a)
	}

	printf("%v\n", p)

	// Strings
	pc := []char{}

	{
		s := "Hello"
		pc = s
		s = "Hey " + s

		printf(s + '\n')                
	}

	pc[len(pc) - 1] = '\0'

	var s2: str = pc
	
	printf(sprintf("%v ", pc) + s2 + '\n')
	printf(str(pc) + s2 + '\n')
	printf(s2 + str(pc) + '\n')
}

fn test3() {
	a := [2]int{5, 7}
	b := []int{5, 7}
	
	std::assert(a == b)
	std::assert(b == a)
	
	c := "ab"
	d := []char{'a', 'b'}
	
	std::assert(c == d)
	std::assert(d == c)

	std::assert(c + d == "abab")
	std::assert(d + c == "abab")
}

fn test4() {
    s := "Hello,"
    a := []uint8(s + " Brave New World!")
    b := []uint8(s + " дивный новый мир!")
    printf("%v\n%v\n", a, b)
    printf("%s\n%s\n", str(a), str(b))
}

fn test5() {
    b := []char{'P', 'Q'}
    b = append(b, 'R')
    b = delete(b, 2)
    printf("%v %v %v %v\n", b, str(b), len(b), len(str(b)))

    c := []char{'P', 'Q', '\0', 'S'}
    c = append(c, 'R')
    c = delete(c, 3)
    printf("%v %v %v %v\n", c, str(c), len(c), len(str(c)))    
}

fn test6() {
	type S = struct {
    	a: int8
    	b: int16
	}

    c1 := int32(0x01020304)
    s1 := ^S(&c1)^
    
    c2 := int32(0x0102FF04)
    s2 := ^S(&c2)^
    
    printf("%v %v %v\n", s1, s2, s1 == s2)
}

fn test*() {
	test1()
	test2()
	test3()
	test4()
	test5()
	test6()
}

fn main() {
	test()
}
