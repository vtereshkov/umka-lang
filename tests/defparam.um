type F = fn (s: str = "Hello"): str

const foo = fn (s: str = "Hello"): str {
   return "foo: " + s
}

type P = struct {
    x, y: int
}

type I = interface {
    bar(a: int, b: real = 3.14, c: ^int = null, d: P = P{5, 7}, e: [2]int = [2]int{7, 8}, f: F = foo): P
}

type S = struct {
    state: int
}

fn (s: ^S) bar(a: int, b: real = 3.14, c: ^int = null, d: P = P{5, 7}, e: [2]int = [2]int{7, 8}, f: F = foo): P {
    printf("%v %v %v %v %v %v\n", a, b, c == null, d, e, f())
    return d
}

fn check(f: F, i: I) {
    printf(f() + '\n')
    printf(f("World") + '\n')

    v := 5

    i.bar(2)
    i.bar(2, 6.28)
    i.bar(2, 6.28, &v)
    i.bar(2, 6.28, &v, P{42, 43})
    i.bar(2, 6.28, &v, P{42, 43}, [2]int{9, 10})
    i.bar(2, 6.28, &v, P{42, 43}, [2]int{9, 10}, f)
}

fn test*() {
    s := S{}
    check(foo, s)
}

fn main() {
    test()
}