import "std.um"

fn childFunc(parent: fiber, buf: ^[2]real) {
    for i := 0; i < 5; i++ {
        std.println("Child  fiber: i = " + std.itoa(i) + "   buf = " + std.ftoa(buf[0], 2))
        buf[1] = i * 3
        fibercall(parent)
    }
}

fn test*() {
    buf := new([2]real)
    child := fiberspawn(childFunc, buf)
    
    for i := 0; i < 10; i++ {
        std.println("Parent fiber: i = " + std.itoa(i) + "   buf = " + std.ftoa(buf[1], 2))
        buf[0] = i * 7
        if fiberalive(child) {
            fibercall(child)
        }
    }
}   

fn main() {
    test()
}