import "std.um"

var x: []int = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}
y := []int{22, 23}

var z: [][]real = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8.5}
}

var chars: []char = "Hahaha"

fn foo(name: str, words: []str = {"Hello", "World"})

fn test*() {
    printf("%v\n", x)

    ptr1 := &x[0]

    x = delete(x, 15)
    printf("%v\n", x)

    x = delete(x, 1)
    printf("%v\n", x)
    
    x = append(x, y)
    printf("%v\n", x)

    ptr2 := &x[0]
    std::assert(ptr1 == ptr2)

    for i := 0; i < 10; i++ {
        x = append(x, []int{66 + i, 77 + i})
    }
    printf("%v\n", x)

    printf("%v\n", z)

    printf("%v\n", append(copy(chars), []char("-Hohoho")))
    printf("%v\n", chars)

    std::assert(chars < append(copy(chars), []char{'h', 'a'}))
    std::assert(chars > slice(chars, 0, 2))

    capChars := copy(chars)
    std::assert(chars == capChars)
    capChars[1] = 'A'
    std::assert(chars >= capChars)

    var u, v: []real
    std::assert(u == v)
    std::assert(u == {})
    std::assert(u < {3.14})

    foo("Vasiliy")
    foo("Umka", {"Meow", "Purr", "Meow"})
}

fn foo(name: str, words: []str = {"Hello", "World"}) {
    greeting := name + " says "
    for _, w in words {
        greeting += w + " "
    }
    printf("%s\n", greeting)
}

fn main() {
    test()
}