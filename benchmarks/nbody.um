// N body problem benchmark - Umka version

import "std.um"

type Body = struct {
   x, y, z, vx, vy, vz, mass: real
}

const (
   pi          = 3.14159265358979323846
   solarMass   = 4 * pi * pi
   daysPerYear = 365.24
)

fn offsetMomentum(b: ^Body, px, py, pz: real) {
   b.vx = -px / solarMass
   b.vy = -py / solarMass
   b.vz = -pz / solarMass
}

type System = []^Body

fn NewSystem(bodies: ^[]Body): System {
   sys := make([]^Body, len(bodies^))
   for i in sys {
      sys[i] = &bodies[i]
   }
   var px, py, pz: real
   for _, body in sys {
      px += body.vx * body.mass
      py += body.vy * body.mass
      pz += body.vz * body.mass
   }
   offsetMomentum(sys[0], px, py, pz)
   return sys
}

fn energy(sys: ^System): real {
   var e: real
   for i, body in sys^ {
      e += 0.5 * body.mass * (body.vx*body.vx + body.vy*body.vy + body.vz*body.vz)
      for j := i + 1; j < len(sys^); j++ {
         body2 := sys[j]
         dx := body.x - body2.x
         dy := body.y - body2.y
         dz := body.z - body2.z
         distance := sqrt(dx*dx + dy*dy + dz*dz)
         e -= (body.mass * body2.mass) / distance
      }
   }
   return e
}

fn advance(sys: ^System, dt: real) {
   for i, body in sys^ {
      for j := i + 1; j < len(sys^); j++ {
         body2 := sys[j]
         dx := body.x - body2.x
         dy := body.y - body2.y
         dz := body.z - body2.z

         dSquared := dx*dx + dy*dy + dz*dz
         distance := sqrt(dSquared)
         mag := dt / (dSquared * distance)

         body.vx -= dx * body2.mass * mag
         body.vy -= dy * body2.mass * mag
         body.vz -= dz * body2.mass * mag

         body2.vx += dx * body.mass * mag
         body2.vy += dy * body.mass * mag
         body2.vz += dz * body.mass * mag
      }
   }

   for i, body in sys^ {
      body.x += dt * body.vx
      body.y += dt * body.vy
      body.z += dt * body.vz
   }
}

   jupiter := Body{
      x: 4.84143144246472090e+00,
      y: -1.16032004402742839e+00,
      z: -1.03622044471123109e-01,
      vx: 1.66007664274403694e-03 * daysPerYear,
      vy: 7.69901118419740425e-03 * daysPerYear,
      vz: -6.90460016972063023e-05 * daysPerYear,
      mass: 9.54791938424326609e-04 * solarMass}

   saturn := Body{
      x: 8.34336671824457987e+00,
      y: 4.12479856412430479e+00,
      z: -4.03523417114321381e-01,
      vx: -2.76742510726862411e-03 * daysPerYear,
      vy: 4.99852801234917238e-03 * daysPerYear,
      vz: 2.30417297573763929e-05 * daysPerYear,
      mass: 2.85885980666130812e-04 * solarMass}

   uranus := Body{
      x: 1.28943695621391310e+01,
      y: -1.51111514016986312e+01,
      z: -2.23307578892655734e-01,
      vx: 2.96460137564761618e-03 * daysPerYear,
      vy: 2.37847173959480950e-03 * daysPerYear,
      vz: -2.96589568540237556e-05 * daysPerYear,
      mass: 4.36624404335156298e-05 * solarMass}

   neptune := Body{
      x: 1.53796971148509165e+01,
      y: -2.59193146099879641e+01,
      z: 1.79258772950371181e-01,
      vx: 2.68067772490389322e-03 * daysPerYear,
      vy: 1.62824170038242295e-03 * daysPerYear,
      vz: -9.51592254519715870e-05 * daysPerYear,
      mass: 5.15138902046611451e-05 * solarMass}

   sun := Body{
      x: 0, y: 0, z: 0, vx: 0, vy: 0, vz: 0,
      mass: solarMass}

fn test*(iter: int) {
   var bodies: []Body = [5]Body{sun, jupiter, saturn, uranus, neptune}
   system := NewSystem(&bodies)
   printf("%.9f\n", energy(&system))
   for i := 0; i < iter; i++ {
      advance(&system, 0.01)
   }
   printf("%.9f\n", energy(&system))   
}

fn main() {
   if std::argc() == 2 {
      test(std::atoi(std::argv(1)))
   }
}

