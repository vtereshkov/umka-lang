// Umka standard library

// Memory

const runtimeError* = -1

fn rtlmemcpy(dest, src: ^void, count: int)

fn tobytes*(buf: any): []uint8 {
    if buf.__self == null {
        exit(runtimeError, "Buffer is null")
    }
    bytes := make([]uint8, sizeofself(buf))
    rtlmemcpy(&bytes[0], buf.__self, sizeofself(buf))
    return bytes
}

fn frombytes*(buf: any, bytes: []uint8) {
    if buf.__self == null {
        exit(runtimeError, "Buffer is null")
    }    
    if selfhasptr(buf) {
        exit(runtimeError, "Cannot access reference types")
    }
    if sizeofself(buf) != len(bytes) {
        exit(runtimeError, "Illegal buffer size")
    }
    rtlmemcpy(buf.__self, &bytes[0], sizeofself(buf))    
}

// File I/O

type (
    File* = ^struct {}

    SeekFrom* = enum {
        begin
        cur
        end
    }
)

fn rtlstdin(): File

fn stdin*(): File {
    return rtlstdin()
}

fn rtlstdout(): File

fn stdout*(): File {
    return rtlstdout()
}

fn rtlstderr(): File

fn stderr*(): File {
    return rtlstderr()
}

fn rtlfopen(name: str, mode: str): File

fn fopen*(name: str, mode: str): File {
    return rtlfopen(name, mode)
}

fn rtlfclose(f: File): int

fn fclose*(f: File): int {
    return rtlfclose(f)
}

fn rtlfread(buf: ^void, size, cnt: int, f: File): int

fn fread*(f: File, buf: any): int {
    if f == null {
        exit(runtimeError, "File is null")
    }
    if bytes := ^[]int8(buf); bytes != null {
        return rtlfread(&bytes[0], len(bytes^), 1, f)
    }
    if ubytes := ^[]uint8(buf); ubytes != null {
        return rtlfread(&ubytes[0], len(ubytes^), 1, f)
    }        
    if chars := ^[]char(buf); chars != null {
        return rtlfread(&chars[0], len(chars^), 1, f)
    }
    if selfhasptr(buf) {
        exit(runtimeError, "Cannot read reference types except ^[]int8, ^[]uint8, ^[]char")
    }
    return rtlfread(buf.__self, sizeofself(buf), 1, f)
}

fn rtlfwrite(buf: ^void, size, cnt: int, f: File): int

fn fwrite*(f: File, buf: any): int {
    if f == null {
        exit(runtimeError, "File is null")
    }
    if bytes := ^[]int8(buf); bytes != null {
        return rtlfwrite(&bytes[0], len(bytes^), 1, f)
    }
    if ubytes := ^[]uint8(buf); ubytes != null {
        return rtlfwrite(&ubytes[0], len(ubytes^), 1, f)
    } 
    if chars := ^[]char(buf); chars != null {
        return rtlfwrite(&chars[0], len(chars^), 1, f)
    }             
    if selfhasptr(buf) {
        exit(runtimeError, "Cannot write reference types except ^[]int8, ^[]uint8, ^[]char")
    }
    return rtlfwrite(buf.__self, sizeofself(buf), 1, f)
}

fn rtlfseek(f: File, offset: int, origin: SeekFrom): int

fn fseek*(f: File, offset: int, origin: SeekFrom): int {
    if f == null {
        exit(runtimeError, "File is null")
    }
    return rtlfseek(f, offset, origin)
}

fn rtlftell(f: File): int

fn ftell*   (f: File): int {
    if f == null {
        exit(runtimeError, "File is null")
    }
    return rtlftell(f)
}

fn rtlremove(name: str): int

fn remove*(name: str): int {
    return rtlremove(name)
}

fn rtlfeof(f: File): int

fn feof*(f: File): bool {
    if f == null {
        exit(runtimeError, "File is null")
    }                
    return bool(rtlfeof(f))
}

fn rtlfflush(f: File): int

fn fflush*   (f: File): int {
	if f == null {
		exit(runtimeError, "File is null")
	}
	return rtlfflush(f)
}

// I/O utilities

fn println*(s: str): int {
    return printf("%s\n", s)
}

fn fprintln*(f: File, s: str): int {
    return fprintf(f, "%s\n", s)
}

fn getchar*(): char {
    var c: char
    scanf("%c", &c)
    return c
}

// Strings

fn ltrim*(s: str): str {
    start := -1
    slen := len(s)
    for i := 0; i < slen; i++ {
        if s[i] > ' ' {
            start = i
            break
        } 
    }
    if start == -1 {return ""}
    return slice(s, start)
}

fn rtrim*(s: str): str {
    stop := -1
    slen := len(s)
    for i := slen - 1; i >= 0; i-- {
        if s[i] > ' ' {
            stop = i
            break
        } 
    }
    if stop == -1 {return ""}
    return slice(s, 0, stop + 1)
}

fn trim*(s: str): str {
    return ltrim(rtrim(s))
}

// Conversions

fn atoi*(s: str): int {
    var x: int
    sscanf(s, "%lld", &x)
    return x
}

fn atof*(s: str): real {
    var x: real
    sscanf(s, "%lf", &x)
    return x
}

fn itoa*(x: int): str {
    s := sprintf("%lld", x)
    return s
}

fn ftoa*(x: real, decimals: int): str {
    fmt := sprintf("%%.%lldlf", decimals)
    s := sprintf(fmt, x)
    return s
}

// Math

const pi* = 3.14159265358979323846

// Random numbers

const (
    junkBits = 8
    randSeedMax = 0xFFFFFFFF
    randMax* = randSeedMax >> junkBits
)

randSeed := 0

fn srand*(seed: int) {
    randSeed = seed
}

fn rand*(): int {
    randSeed = (1664525 * randSeed + 1013904223) & randSeedMax
    return randSeed >> junkBits
}

fn frand*(): real {
    return real(rand()) / randMax
}

// Time

type DateTime* = struct {
    second, minute, hour: int
    day, month, year: int
    dayOfWeek, dayOfYear: int
    isDST: bool
}

fn rtltime(): int

fn time*(): int {
    return rtltime()
}

fn rtlclock(): real

fn clock*(): real {
    return rtlclock()
}

fn rtllocaltime(t: int): DateTime

fn localtime*(t: int): DateTime {
    return rtllocaltime(t)
}

fn rtlgmtime(t: int): DateTime

fn gmtime*(t: int): DateTime {
    return rtlgmtime(t)
}

fn rtlmktime(d: ^DateTime): int

fn mktime*(d: DateTime): int {
    return rtlmktime(&d)
}

fn timestr*(d: DateTime): str {
    return sprintf("%4d-%02d-%02d %02d:%02d:%02d", 
                   d.year, d.month, d.day,
                   d.hour, d.minute, d.second)
}

// Command line and environment

fn argc*(): int {
    return len(rtlargv)
}

fn argv*(i: int): str {
    return rtlargv[i]
}

fn rtlgetenv(name: str): str

fn getenv*(name: str): str {
    return rtlgetenv(name)
}

fn rtlsystem(command: str): int

fn system*(command: str): int {
    return rtlsystem(command)
}

// Error handling

type (
    ErrPos* = struct {
        file: str
        func: str
        line: int
    }

    Err* = struct {
        code: int
        msg: str
        sender: any
        trace: []ErrPos
    }
)

fn rtltrace(depth: int, pos: ^ErrPos): int

fn error*(code: int = 0, msg: str = "", sender: any = null): Err {
    err := Err{code, msg, sender, {}}
    if code != 0 {
        var pos: ErrPos
        for depth := 2; depth < 10 && rtltrace(depth, &pos) == 0; depth++ {
            err.trace = append(err.trace, pos)
        } 
    }
    return err
}

fn exitif*(err: Err) {
    if err.code != 0 {
        printf("Runtime error: %s (code %d) in %v\n", err.msg, err.code, err.sender)
        printf("Stack trace:\n")
        for _, pos in err.trace {
            printf("    %s: %s (%d)\n", pos.func, pos.file, pos.line)
        }
        exit(err.code)
    }    
}
