// UTF-8 utilities

type Rune* = int32 

const (
    errRune* = Rune(0xFFFD)
    errStr* = "\xEF\xBF\xBD"                               
)

headerOnes := [6]uint8{0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8}

fn (r: ^Rune) size*(): int {
    if r^ <= 0x7F     {return 1}
    if r^ <= 0x7FF    {return 2}
    if r^ <= 0xFFFF   {return 3}
    if r^ <= 0x10FFFF {return 4}
    return -1
}

fn (r: ^Rune) encode*(): str {
    size := r.size()

    if size <= 0 {return errStr} 
    if size == 1 {return str(char(r^))}

    chars := make([]char, size + 1)

    shift := (size - 1) * 6
    chars[0] = char(((r^ >> shift & 0xFF) | headerOnes[size]) & 0xFF)

    for i := 1; i < size; i++ {
        shift -= 6
        chars[i] = char(r^ >> shift & 0x3F | 0x80)
    }

    return str(chars)
}

fn encode*(runes: []Rune): str {
    s := ""
    for _, r in runes {
        s += r.encode()
    }
    return s
}

fn decodeRune*(chars: []char, pos: int): Rune {
    // Process header byte
    header := uint8(chars[pos])

    if header & 0x80 == 0 {
        return Rune(header) // ASCII character
    }

    size := 0

    if header & headerOnes[3] == headerOnes[2] {
        size = 2
    } else if header & headerOnes[4] == headerOnes[3] {
        size = 3
    } else if header & headerOnes[5] == headerOnes[4] {
        size = 4
    }

    if size == 0 {
        return errRune
    }
     
    shift := (size - 1) * 6
    rune := Rune(header & ~headerOnes[size + 1]) << shift
    
    // Process continuation bytes
    for i := 1; i < size; i++ {
        if pos + i >= len(chars) {
            return errRune
        }

        byte := uint8(chars[pos + i])
        if byte & 0xC0 != 0x80 {
            return errRune
        }

        shift -= 6        
        rune |= Rune(byte & 0x3F) << shift
    }

    return rune
}

fn decode*(s: str): []Rune {
    chars := []char(s)
    runes := []Rune{}

    for pos := 0; pos < len(chars) {
        rune := decodeRune(chars, pos)
        if rune == errRune {
            break
        }
        runes = append(runes, rune)
        pos += rune.size()
    }

    return runes
}

fn runeCount*(s: str): int {
    chars := []char(s)    
    count := 0

    for pos := 0; pos < len(chars) {
        rune := decodeRune(chars, pos)
        if rune == errRune {
            break
        }
        count++
        pos += rune.size()
    }

    return count
}
