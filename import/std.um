// Umka standard library

// File I/O

type File* = ^struct {}

const (
    seekBegin* = 0
    seekCur*   = 1
    seekEnd*   = 2
)    

fn rtlfopen  (name: str, mode: str): File;  
fn fopen*    (name: str, mode: str): File {return rtlfopen(name, mode)}

fn rtlfclose (f: File): int
fn fclose*   (f: File): int {return rtlfclose(f)}

fn rtlfread(buf: ^void, size, cnt: int, f: File): int
fn fread*(f: File, buf: interface{}): int {
    if selfhasptr(buf) {
        error("Cannot read reference types")
    }
    return rtlfread(buf.__self, sizeofself(buf), 1, f)
}

fn rtlfwrite(buf: ^void, size, cnt: int, f: File): int
fn fwrite*(f: File, buf: interface{}): int {
    if selfhasptr(buf) {
        error("Cannot write reference types")
    }
    return rtlfwrite(buf.__self, sizeofself(buf), 1, f)
}

fn rtlfseek  (f: File, offset, origin: int): int
fn fseek*    (f: File, offset, origin: int): int {return rtlfseek(f, offset, origin)}

fn rtlftell (f: File): int
fn ftell*   (f: File): int { return rtlftell(f) }

fn rtlremove (name: str): int
fn remove*   (name: str): int {return rtlremove(name)}

// I/O utilities

fn println*(s: str): int {return printf("%s\n", s)}
fn fprintln*(f: File, s: str): int {return fprintf(f, "%s\n", s)}

fn getchar*(): char {
    var c: char
    scanf("%c", &c)
    return c
}

// Conversions

fn atoi*(s: str): int {
    var x: int
    sscanf(s, "%lld", &x)
    return x
}

fn atof*(s: str): real {
    var x: real
    sscanf(s, "%lf", &x)
    return x
}

fn itoa*(x: int): str {
    s := str(new([256]char))
    sprintf(s, "%lld", x)
    return s
}

fn ftoa*(x: real, decimals: int): str {
    fmt := str(new([256]char))
    s := str(new([256]char))
    sprintf(fmt, "%%.%dlf", decimals)
    sprintf(s, fmt, x)
    return s
}

// Math

const pi* = 3.14159265358979323846

// Random numbers

const randMax* = 0x7FFFFFFF
randSeed := 0

fn srand*(seed: int) {randSeed = seed}

fn rand*(): int {
    randSeed = ((randSeed * 1103515245) + 12345) & 0x7FFFFFFF
    return randSeed
}

fn frand*(): real {return real(rand()) / randMax}

// Timer

fn rtltime(): int
fn time*(): int {return rtltime()}

fn rtlclock(): real
fn clock*(): real {return rtlclock()}

// Command line and environment

fn argc*(): int {return rtlargc}

fn argv*(i: int): str {
    if i < 0 || i >= rtlargc {
        error("Command line parameter not found")
    }
    return rtlargv[i]
}

fn rtlgetenv(name: str): str
fn getenv*(name: str): str {
    return "" + rtlgetenv(name)
}
